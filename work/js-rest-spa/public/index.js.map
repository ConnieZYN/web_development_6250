{"version":3,"file":"index.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,6BAA6B,6BAA6B;AAC1D,KAAK;AACL,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,6BAA6B,UAAU;AACvC,KAAK;AACL,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD,wCAAwC,qBAAqB,kBAAkB,SAAS;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://js-rest-spa/./src/index.js"],"sourcesContent":["\"use strict\";\r\n(function() {\r\n  \r\n  let stateInventory = 0;\r\n\r\n  const MESSAGES = {\r\n    networkError: 'Trouble connecting to the network.  Please try again',\r\n    noUsernameError: 'The username is empty',\r\n    invalidUserError: 'The Username dog is invalid',\r\n    default: 'Something went wrong.  Please try again',\r\n  };\r\n\r\n  checkForSession();\r\n\r\n  function addAbilityToIncreaseInventory() {\r\n    const buttonEl = document.querySelector('#increment');\r\n    buttonEl.addEventListener('click', (e) => {\r\n      stateInventory++;\r\n      updateInventory()\r\n      .then( renderOnFetchInventory )\r\n      .catch( error => renderStatus(error) );\r\n    });\r\n  }\r\n\r\n  function addAbilityToDecreaseInventory() {\r\n    const buttonEl = document.querySelector('#decrement');\r\n    buttonEl.addEventListener('click', (e) => {\r\n      stateInventory--;\r\n      updateInventory()\r\n      .then( renderOnFetchInventory )\r\n      .catch( error => renderStatus(error) );\r\n    });\r\n  }\r\n\r\n  function addAbilityToLogin() {\r\n    const buttonEl = document.querySelector('.login-button button');\r\n    const usernameEl = document.querySelector('.login-username');\r\n    buttonEl.addEventListener('click', (e) => {\r\n      const username = usernameEl.value;\r\n      fetchLogin(username)\r\n      .then( renderOnLogin )\r\n      .catch( error => renderStatus(error) );\r\n    });\r\n  }\r\n\r\n  function addAbilityToLogout() {\r\n    const buttonEl = document.querySelector('.logout');\r\n    buttonEl.addEventListener('click', (e) => {\r\n      stateInventory = 0;\r\n      fetchLogout()\r\n      .then( () => render(false) )\r\n      .catch( error => renderStatus(error) );\r\n    });\r\n  }\r\n\r\n  function renderOnLogin(inventoryObj) {\r\n    stateInventory = inventoryObj.inventory;\r\n    render(true);\r\n  }\r\n\r\n  function renderOnFetchInventory(inventoryObj) {\r\n    stateInventory = inventoryObj.inventory;\r\n    render(true);\r\n  }\r\n\r\n  function checkForSession() {\r\n    fetchSession()\r\n    .then ( fetchInventory )\r\n    .then ( renderOnFetchInventory )\r\n    .catch( () => render(false) );\r\n  }\r\n\r\n  function fetchInventory() {\r\n    return fetch('/api/inventory')\r\n    .catch( () => Promise.reject({ error: 'networkError' }) )\r\n    .then( response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return response.json()\r\n      .catch( error => Promise.reject({ error }) )\r\n      .then( err => Promise.reject(err) );\r\n    });\r\n  }\r\n\r\n  function updateInventory() {\r\n    return fetch('/api/inventory', {\r\n      method: 'PUT',\r\n      headers: new Headers({\r\n        'content-type': 'application/json'\r\n      }),\r\n      body: JSON.stringify({ 'inventory': stateInventory }),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'networkError' }) )\r\n    .then( response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return response.json()\r\n      .catch( error => Promise.reject({ error }) )\r\n      .then( err => Promise.reject(err) );\r\n    });\r\n  }\r\n\r\n  function fetchSession() {\r\n    return fetch('/api/session', {\r\n      method: 'GET',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'networkError' }) )\r\n    .then( response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return response.json()\r\n      .catch( error => Promise.reject({ error }) )\r\n      .then( err => Promise.reject(err) );\r\n    });\r\n  }\r\n\r\n  function fetchLogin(username) {\r\n    return fetch('/api/session', {\r\n      method: 'POST',\r\n      headers: new Headers({\r\n        'content-type': 'application/json'\r\n      }),\r\n      body: JSON.stringify({ username }),\r\n    })\r\n    .catch( () => Promise.reject({ error: 'networkError' }) )\r\n    .then( response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      console.log(response.status);\r\n    \r\n      if (response.status == 400) {\r\n        return Promise.reject({ error: 'noUsernameError'})\r\n      }\r\n      if (response.status == 403) {\r\n        return Promise.reject({ error: 'invalidUserError'})\r\n      }\r\n      return response.json()\r\n      .catch( error => Promise.reject({ error }) )\r\n      .then( err => Promise.reject(err) );\r\n    });\r\n  }\r\n  \r\n  function fetchLogout() {\r\n    return fetch('/api/session', {\r\n      method: 'DELETE',\r\n    })\r\n    .catch( () => Promise.reject({ error: 'networkError' }) )\r\n    .then( response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      return response.json()\r\n      .catch( error => Promise.reject({ error }) )\r\n      .then( err => Promise.reject(err) );\r\n    });\r\n  }\r\n\r\n  function render( isLoggedIn ) {\r\n    const loginEl = document.querySelector('.login');\r\n    const inventoryEl = document.querySelector('.inventory');\r\n    const logoutEl = document.querySelector('.logout');\r\n    renderLogin(loginEl, isLoggedIn);\r\n    renderInventory(inventoryEl, isLoggedIn);\r\n    renderLogout(logoutEl, isLoggedIn);\r\n    if(isLoggedIn) {\r\n      addAbilityToIncreaseInventory();\r\n      addAbilityToDecreaseInventory();\r\n      addAbilityToLogout();\r\n    } else {\r\n      addAbilityToLogin();\r\n    }\r\n    renderStatus('');\r\n  }\r\n\r\n  function renderInventory(inventoryEl, isLoggedIn) {\r\n    if (!isLoggedIn) {\r\n      inventoryEl.innerHTML = ``;\r\n      return;\r\n    }\r\n    const canDrecrese = stateInventory > 0;\r\n    const decrementButtonClass = canDrecrese ? \"inventory-button enabled\" : \"inventory-button disabled\";\r\n    const disabled = canDrecrese ? \"\" : \"disabled\";\r\n    inventoryEl.innerHTML=`\r\n      <div class=\"diplay-block\">\r\n        <button id=\"increment\" class=\"inventory-button enabled\" type=\"button\">+</button>\r\n        <span class=\"inventory-count\">${stateInventory}</span>\r\n        <button id=\"decrement\" class=\"${decrementButtonClass}\" type=\"button\" ${disabled}>-</button>\r\n      </div>\r\n      `;\r\n  }\r\n\r\n  function renderLogin(loginEl, isLoggedIn) {\r\n    if (isLoggedIn) {\r\n      loginEl.innerHTML = ``;\r\n      return;\r\n    }\r\n    loginEl.innerHTML = `\r\n        <div class=\"diplay-block\">\r\n          <form action=\"#\">\r\n            <label>\r\n              <span>Username:</span>\r\n              <input class=\"login-username\">\r\n            </label>\r\n            <div class=\"login-button\">\r\n              <button type=\"button\" >Login</button> \r\n            </div>\r\n          </form>\r\n        </div>\r\n      `;\r\n  }\r\n\r\n  function renderLogout(logoutEl, isLoggedIn) {\r\n    if (!isLoggedIn) {\r\n      logoutEl.innerHTML = ``;\r\n      return;\r\n    }\r\n    logoutEl.innerHTML=`\r\n        <div  class=\"logout-block\">\r\n          <button class=\"logout-button\">Logout</button>\r\n        </div>\r\n      `;\r\n  }\r\n\r\n  function renderStatus(message) {\r\n    const statusEl = document.querySelector('.status');\r\n    if( !message ) {\r\n      statusEl.innerText = '';\r\n      return;\r\n    }\r\n    const key = message?.error ? message.error : 'default';\r\n    statusEl.innerText = MESSAGES[key] || MESSAGES.default;\r\n  }\r\n\r\n})();\r\n"],"names":[],"sourceRoot":""}